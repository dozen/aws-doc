[ :ref:`aws <cli:aws>` . :ref:`gamelift <cli:aws gamelift>` ]

.. _cli:aws gamelift create-fleet:


************
create-fleet
************



===========
Description
===========



Creates a new fleet to host game servers. A fleet consists of a set of Amazon Elastic Compute Cloud (Amazon EC2) instances of a certain type, which defines the CPU, memory, storage, and networking capacity of each host in the fleet. See `Amazon EC2 Instance Types`_ for more information. Each instance in the fleet hosts a game server created from the specified game build. Once a fleet is in an ACTIVE state, it can begin hosting game sessions.

 

To create a new fleet, provide a name and the EC2 instance type for the new fleet, and specify the build and server launch path. Builds must be in a READY state before they can be used to build fleets. When configuring the new fleet, you can optionally (1) provide a set of launch parameters to be passed to a game server when activated; (2) limit incoming traffic to a specified range of IP addresses and port numbers; and (3) configure Amazon GameLift to store game session logs by specifying the path to the logs stored in your game server files. If the call is successful, Amazon GameLift performs the following tasks:

 

 
* Creates a fleet record and sets the state to NEW.
 
* Sets the fleet's capacity to 1 "desired" and 1 "active" EC2 instance count.
 
* Creates an EC2 instance and begins the process of initializing the fleet and activating a game server on the instance.
 
* Begins writing events to the fleet event log, which can be accessed in the GameLift console.
 

 

Once a fleet is created, use the following actions to change certain fleet properties (server launch parameters and log paths cannot be changed):

 

 
*  update-fleet-attributes -- Update fleet metadata, including name and description.
 
*  update-fleet-capacity -- Increase or decrease the number of instances you want the fleet to maintain.
 
*  update-fleet-port-settings -- Change the IP addresses and ports that allow access to incoming traffic.
 



========
Synopsis
========

::

    create-fleet
  --name <value>
  [--description <value>]
  --build-id <value>
  --server-launch-path <value>
  [--server-launch-parameters <value>]
  [--log-paths <value>]
  --ec2-instance-type <value>
  [--ec2-inbound-permissions <value>]
  [--cli-input-json <value>]
  [--generate-cli-skeleton]




=======
Options
=======

``--name`` (string)


  Descriptive label associated with this fleet. Fleet names do not need to be unique.

  

``--description`` (string)


  Human-readable description of the fleet.

  

``--build-id`` (string)


  Unique identifier for the build you want the new fleet to use.

  

``--server-launch-path`` (string)


  Path to the launch executable for the game server. A game server is built into a ``C:\game`` drive. This value must be expressed as ``C:\game\[launchpath]`` . Example: If, when built, your game server files are in a folder called "MyGame", your log path should be ``C:\game\MyGame\server.exe`` .

  

``--server-launch-parameters`` (string)


  Parameters required to launch your game server. These parameters should be expressed as a string of command-line parameters. Example: "+sv_port 33435 +start_lobby".

  

``--log-paths`` (list)


  Path to game-session log files generated by your game server. Once a game session has been terminated, Amazon GameLift captures and stores the logs on Amazon S3. Use the GameLift console to access the stored logs.

  



Syntax::

  "string" "string" ...



``--ec2-instance-type`` (string)


  Type of EC2 instances used in the fleet. EC2 instance types define the CPU, memory, storage, and networking capacity of the fleetaposs hosts. Amazon GameLift supports the EC2 instance types listed below. See `Amazon EC2 Instance Types`_ for detailed descriptions of each.

  

  Possible values:

  
  *   ``t2.micro``

  
  *   ``t2.small``

  
  *   ``t2.medium``

  
  *   ``t2.large``

  
  *   ``c3.large``

  
  *   ``c3.xlarge``

  
  *   ``c3.2xlarge``

  
  *   ``c3.4xlarge``

  
  *   ``c3.8xlarge``

  
  *   ``c4.large``

  
  *   ``c4.xlarge``

  
  *   ``c4.2xlarge``

  
  *   ``c4.4xlarge``

  
  *   ``c4.8xlarge``

  
  *   ``r3.large``

  
  *   ``r3.xlarge``

  
  *   ``r3.2xlarge``

  
  *   ``r3.4xlarge``

  
  *   ``r3.8xlarge``

  
  *   ``m3.medium``

  
  *   ``m3.large``

  
  *   ``m3.xlarge``

  
  *   ``m3.2xlarge``

  
  *   ``m4.large``

  
  *   ``m4.xlarge``

  
  *   ``m4.2xlarge``

  
  *   ``m4.4xlarge``

  
  *   ``m4.10xlarge``

  

  

``--ec2-inbound-permissions`` (list)


  Access limits for incoming traffic. Setting these values limits game server access to incoming traffic using specified IP ranges and port numbers. Some ports in a range may be restricted. You can provide one or more sets of permissions for the fleet.

  



Shorthand Syntax::

    FromPort=integer,ToPort=integer,IpRange=string,Protocol=string ...




JSON Syntax::

  [
    {
      "FromPort": integer,
      "ToPort": integer,
      "IpRange": "string",
      "Protocol": "TCP"|"UDP"
    }
    ...
  ]



``--cli-input-json`` (string)
Performs service operation based on the JSON string provided. The JSON string follows the format provided by ``--generate-cli-skeleton``. If other arguments are provided on the command line, the CLI values will override the JSON-provided values.

``--generate-cli-skeleton`` (boolean)
Prints a sample input JSON to standard output. Note the specified operation is not run if this argument is specified. The sample input can be used as an argument for ``--cli-input-json``.



======
Output
======

FleetAttributes -> (structure)

  

  Properties for the newly created fleet.

  

  FleetId -> (string)

    

    Unique identifier for a fleet.

    

    

  Description -> (string)

    

    Human-readable description of the fleet.

    

    

  Name -> (string)

    

    Descriptive label associated with this fleet. Fleet names do not need to be unique.

    

    

  CreationTime -> (timestamp)

    

    Time stamp indicating when this object was created. Format is an integer representing the number of seconds since the Unix epoch (Unix time).

    

    

  TerminationTime -> (timestamp)

    

    Time stamp indicating when this fleet was terminated. Format is an integer representing the number of seconds since the Unix epoch (Unix time).

    

    

  Status -> (string)

    

    Current status of the fleet. Possible fleet states include: 

    
    * NEW: A new fleet has been defined and hosts allocated.
    
    * DOWNLOADING/VALIDATING/BUILDING/ACTIVATING: The new fleet is being set up with the game build, and new hosts are being started.
    
    * ACTIVE: Hosts can now accept game sessions.
    
    * ERROR: An error occurred when downloading, validating, building, or activating the fleet.
    
    * DELETING: Hosts are responding to a delete fleet request.
    
    * TERMINATED: The fleet no longer exists.
    

    

    

    

  BuildId -> (string)

    

    Unique identifier for a build.

    

    

  ServerLaunchPath -> (string)

    

    Path to the launch executable for the game server. A game server is built into a ``C:\game`` drive. This value must be expressed as ``C:\game\[launchpath]`` . Example: If, when built, your game server files are in a folder called "MyGame", your log path should be ``C:\game\MyGame\server.exe`` .

    

    

  ServerLaunchParameters -> (string)

    

    Parameters required to launch your game server. These parameters should be expressed as a string of command-line parameters. Example: "+sv_port 33435 +start_lobby".

    

    

  LogPaths -> (list)

    

    Path to game-session log files generated by your game server. Once a game session has been terminated, Amazon GameLift captures and stores the logs on Amazon S3. Use the GameLift console to access the stored logs.

    

    (string)

      

      

    

  



.. _Amazon EC2 Instance Types: https://aws.amazon.com/ec2/instance-types/
