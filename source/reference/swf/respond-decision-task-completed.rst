[ :ref:`aws <cli:aws>` . :ref:`swf <cli:aws swf>` ]

.. _cli:aws swf respond-decision-task-completed:


*******************************
respond-decision-task-completed
*******************************



===========
Description
===========



Used by deciders to tell the service that the  DecisionTask identified by the ``taskToken`` has successfully completed. The ``decisions`` argument specifies the list of decisions made while processing the task.

 

A ``DecisionTaskCompleted`` event is added to the workflow history. The ``executionContext`` specified is attached to the event in the workflow execution history.

 

**Access Control** 

 

If an IAM policy grants permission to use ``respond-decision-task-completed`` , it can express permissions for the list of decisions in the ``decisions`` parameter. Each of the decisions has one or more parameters, much like a regular API call. To allow for policies to be as readable as possible, you can express permissions on decisions as if they were actual API calls, including applying conditions to some parameters. For more information, see `Using IAM to Manage Access to Amazon SWF Workflows`_ .



========
Synopsis
========

::

    respond-decision-task-completed
  --task-token <value>
  [--decisions <value>]
  [--execution-context <value>]
  [--cli-input-json <value>]
  [--generate-cli-skeleton]




=======
Options
=======

``--task-token`` (string)


  The ``taskToken`` from the  DecisionTask .

   

  .. warning::

    ``taskToken`` is generated by the service and should be treated as an opaque value. If the task is passed to another process, its ``taskToken`` must also be passed. This enables it to provide its progress and respond with results.

  

``--decisions`` (list)


  The list of decisions (possibly empty) made by the decider while processing this decision task. See the docs for the decision structure for details.

  



Shorthand Syntax::

    decisionType=string,scheduleActivityTaskDecisionAttributes={activityType={name=string,version=string},activityId=string,control=string,input=string,scheduleToCloseTimeout=string,taskList={name=string},taskPriority=string,scheduleToStartTimeout=string,startToCloseTimeout=string,heartbeatTimeout=string},requestCancelActivityTaskDecisionAttributes={activityId=string},completeWorkflowExecutionDecisionAttributes={result=string},failWorkflowExecutionDecisionAttributes={reason=string,details=string},cancelWorkflowExecutionDecisionAttributes={details=string},continueAsNewWorkflowExecutionDecisionAttributes={input=string,executionStartToCloseTimeout=string,taskList={name=string},taskPriority=string,taskStartToCloseTimeout=string,childPolicy=string,tagList=[string,string],workflowTypeVersion=string,lambdaRole=string},recordMarkerDecisionAttributes={markerName=string,details=string},startTimerDecisionAttributes={timerId=string,control=string,startToFireTimeout=string},cancelTimerDecisionAttributes={timerId=string},signalExternalWorkflowExecutionDecisionAttributes={workflowId=string,runId=string,signalName=string,input=string,control=string},requestCancelExternalWorkflowExecutionDecisionAttributes={workflowId=string,runId=string,control=string},startChildWorkflowExecutionDecisionAttributes={workflowType={name=string,version=string},workflowId=string,control=string,input=string,executionStartToCloseTimeout=string,taskList={name=string},taskPriority=string,taskStartToCloseTimeout=string,childPolicy=string,tagList=[string,string],lambdaRole=string},scheduleLambdaFunctionDecisionAttributes={id=string,name=string,input=string,startToCloseTimeout=string} ...




JSON Syntax::

  [
    {
      "decisionType": "ScheduleActivityTask"|"RequestCancelActivityTask"|"CompleteWorkflowExecution"|"FailWorkflowExecution"|"CancelWorkflowExecution"|"ContinueAsNewWorkflowExecution"|"RecordMarker"|"StartTimer"|"CancelTimer"|"SignalExternalWorkflowExecution"|"RequestCancelExternalWorkflowExecution"|"StartChildWorkflowExecution"|"ScheduleLambdaFunction",
      "scheduleActivityTaskDecisionAttributes": {
        "activityType": {
          "name": "string",
          "version": "string"
        },
        "activityId": "string",
        "control": "string",
        "input": "string",
        "scheduleToCloseTimeout": "string",
        "taskList": {
          "name": "string"
        },
        "taskPriority": "string",
        "scheduleToStartTimeout": "string",
        "startToCloseTimeout": "string",
        "heartbeatTimeout": "string"
      },
      "requestCancelActivityTaskDecisionAttributes": {
        "activityId": "string"
      },
      "completeWorkflowExecutionDecisionAttributes": {
        "result": "string"
      },
      "failWorkflowExecutionDecisionAttributes": {
        "reason": "string",
        "details": "string"
      },
      "cancelWorkflowExecutionDecisionAttributes": {
        "details": "string"
      },
      "continueAsNewWorkflowExecutionDecisionAttributes": {
        "input": "string",
        "executionStartToCloseTimeout": "string",
        "taskList": {
          "name": "string"
        },
        "taskPriority": "string",
        "taskStartToCloseTimeout": "string",
        "childPolicy": "TERMINATE"|"REQUEST_CANCEL"|"ABANDON",
        "tagList": ["string", ...],
        "workflowTypeVersion": "string",
        "lambdaRole": "string"
      },
      "recordMarkerDecisionAttributes": {
        "markerName": "string",
        "details": "string"
      },
      "startTimerDecisionAttributes": {
        "timerId": "string",
        "control": "string",
        "startToFireTimeout": "string"
      },
      "cancelTimerDecisionAttributes": {
        "timerId": "string"
      },
      "signalExternalWorkflowExecutionDecisionAttributes": {
        "workflowId": "string",
        "runId": "string",
        "signalName": "string",
        "input": "string",
        "control": "string"
      },
      "requestCancelExternalWorkflowExecutionDecisionAttributes": {
        "workflowId": "string",
        "runId": "string",
        "control": "string"
      },
      "startChildWorkflowExecutionDecisionAttributes": {
        "workflowType": {
          "name": "string",
          "version": "string"
        },
        "workflowId": "string",
        "control": "string",
        "input": "string",
        "executionStartToCloseTimeout": "string",
        "taskList": {
          "name": "string"
        },
        "taskPriority": "string",
        "taskStartToCloseTimeout": "string",
        "childPolicy": "TERMINATE"|"REQUEST_CANCEL"|"ABANDON",
        "tagList": ["string", ...],
        "lambdaRole": "string"
      },
      "scheduleLambdaFunctionDecisionAttributes": {
        "id": "string",
        "name": "string",
        "input": "string",
        "startToCloseTimeout": "string"
      }
    }
    ...
  ]



``--execution-context`` (string)


  User defined context to add to workflow execution.

  

``--cli-input-json`` (string)
Performs service operation based on the JSON string provided. The JSON string follows the format provided by ``--generate-cli-skeleton``. If other arguments are provided on the command line, the CLI values will override the JSON-provided values.

``--generate-cli-skeleton`` (boolean)
Prints a sample input JSON to standard output. Note the specified operation is not run if this argument is specified. The sample input can be used as an argument for ``--cli-input-json``.



======
Output
======

None

.. _Using IAM to Manage Access to Amazon SWF Workflows: http://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html
